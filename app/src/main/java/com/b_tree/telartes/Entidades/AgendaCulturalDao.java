package com.b_tree.telartes.Entidades;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.b_tree.telartes.Entidades.DaoSession;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "AGENDA_CULTURAL".
*/
public class AgendaCulturalDao extends AbstractDao<AgendaCultural, Long> {

    public static final String TABLENAME = "AGENDA_CULTURAL";

    /**
     * Properties of entity AgendaCultural.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nid = new Property(1, int.class, "nid", false, "NID");
        public final static Property Titulo = new Property(2, String.class, "titulo", false, "TITULO");
        public final static Property Campo = new Property(3, String.class, "campo", false, "CAMPO");
        public final static Property Descripcion = new Property(4, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Fecha = new Property(5, String.class, "fecha", false, "FECHA");
        public final static Property Imagen = new Property(6, String.class, "imagen", false, "IMAGEN");
        public final static Property Costo = new Property(7, String.class, "costo", false, "COSTO");
        public final static Property Departamento = new Property(8, String.class, "departamento", false, "DEPARTAMENTO");
        public final static Property Enlace = new Property(9, String.class, "enlace", false, "ENLACE");
        public final static Property Fechainicio = new Property(10, String.class, "fechainicio", false, "FECHAINICIO");
        public final static Property Fechafin = new Property(11, String.class, "fechafin", false, "FECHAFIN");
        public final static Property Lugar_direccion = new Property(12, String.class, "lugar_direccion", false, "LUGAR_DIRECCION");
        public final static Property Archivo = new Property(13, String.class, "archivo", false, "ARCHIVO");
        public final static Property Enviado_por = new Property(14, String.class, "enviado_por", false, "ENVIADO_POR");
    };


    public AgendaCulturalDao(DaoConfig config) {
        super(config);
    }
    
    public AgendaCulturalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AGENDA_CULTURAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NID\" INTEGER NOT NULL ," + // 1: nid
                "\"TITULO\" TEXT NOT NULL ," + // 2: titulo
                "\"CAMPO\" TEXT," + // 3: campo
                "\"DESCRIPCION\" TEXT," + // 4: descripcion
                "\"FECHA\" TEXT," + // 5: fecha
                "\"IMAGEN\" TEXT," + // 6: imagen
                "\"COSTO\" TEXT," + // 7: costo
                "\"DEPARTAMENTO\" TEXT," + // 8: departamento
                "\"ENLACE\" TEXT," + // 9: enlace
                "\"FECHAINICIO\" TEXT," + // 10: fechainicio
                "\"FECHAFIN\" TEXT," + // 11: fechafin
                "\"LUGAR_DIRECCION\" TEXT," + // 12: lugar_direccion
                "\"ARCHIVO\" TEXT," + // 13: archivo
                "\"ENVIADO_POR\" TEXT);"); // 14: enviado_por
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AGENDA_CULTURAL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AgendaCultural entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getNid());
        stmt.bindString(3, entity.getTitulo());
 
        String campo = entity.getCampo();
        if (campo != null) {
            stmt.bindString(4, campo);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(5, descripcion);
        }
 
        String fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindString(6, fecha);
        }
 
        String imagen = entity.getImagen();
        if (imagen != null) {
            stmt.bindString(7, imagen);
        }
 
        String costo = entity.getCosto();
        if (costo != null) {
            stmt.bindString(8, costo);
        }
 
        String departamento = entity.getDepartamento();
        if (departamento != null) {
            stmt.bindString(9, departamento);
        }
 
        String enlace = entity.getEnlace();
        if (enlace != null) {
            stmt.bindString(10, enlace);
        }
 
        String fechainicio = entity.getFechainicio();
        if (fechainicio != null) {
            stmt.bindString(11, fechainicio);
        }
 
        String fechafin = entity.getFechafin();
        if (fechafin != null) {
            stmt.bindString(12, fechafin);
        }
 
        String lugar_direccion = entity.getLugar_direccion();
        if (lugar_direccion != null) {
            stmt.bindString(13, lugar_direccion);
        }
 
        String archivo = entity.getArchivo();
        if (archivo != null) {
            stmt.bindString(14, archivo);
        }
 
        String enviado_por = entity.getEnviado_por();
        if (enviado_por != null) {
            stmt.bindString(15, enviado_por);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AgendaCultural readEntity(Cursor cursor, int offset) {
        AgendaCultural entity = new AgendaCultural( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // nid
            cursor.getString(offset + 2), // titulo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // campo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // descripcion
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fecha
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imagen
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // costo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // departamento
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // enlace
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fechainicio
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fechafin
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lugar_direccion
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // archivo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // enviado_por
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AgendaCultural entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNid(cursor.getInt(offset + 1));
        entity.setTitulo(cursor.getString(offset + 2));
        entity.setCampo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescripcion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFecha(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImagen(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCosto(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDepartamento(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEnlace(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFechainicio(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFechafin(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLugar_direccion(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setArchivo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEnviado_por(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AgendaCultural entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AgendaCultural entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
